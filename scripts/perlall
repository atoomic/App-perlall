#!/usr/bin/env perl
eval 'exec /usr/bin/env perl  -S $0 ${1+"$@"}'
    if 0; # not running under some shell

use strict;
use App::Rad;
our $VERSION = '0.01';

App::Rad->run();

=head1 NAME

perlall - Create all perls and test a module with all perls

=head1 SYNOPSIS

    perlall build perl5.15.4d-nt
    perlall build perl5.15.4
    perlall build perl5.15.4-d

    perlall init perl5.15.4d-nt DBI $(cat ~/Perl/B-C/t/top100)

    perlall do -MData::Dumper -e'my $a;$b={1=>\$a};$a=\$b;print Dumper($b)'
    perlall make -Mblib t/0basic.t
    perlall=5.15.4  perlall maketest
    perlall="5.14*" perlall makeinstall
    perlall cpan My::Module

=head1 DESCRIPTION

B<perlall> is a better L<perlbrew> with perls in the default F</usr/local/bin/, 
and F< /usr/local/lib/perl5/version >, instead of locally. 
It is preferred to have write access to the default PREFIX F</usr/local>.
It does not use L<local::lib>, does not mangle C<PERL5LIB> and 
builds and keeps sane global perl installations, without the need to save
and restore internal states.

The currently used perl and all options are stored as alias 
C<p> in F<~/.perlall>

    alias p=perl5.15.4d-nt

Build and init perls:

Version numbers look like C<5.xx.x> and the C<suffix> can be:

  C<d>   DEBUGGING
  C<-nt> non-threaded
  C<-m>  multi

For older perls special patches are applied to successfully build them.
C<archname> and the archlibs are extended by C<-debug> and special 
git suffices. The installed perl binary ditto.

I use perlall on cygwin, mingw (strawberry), linux (debian+centos),
freebsd, openbsd and solaris, with bash, dash and ksh. 
Supporting other platforms besides VMS should not be hard.
freebsd needs sudo from ports.

The do and make* commands always create a log file with the platform 
and version, like F<log.test-centos5-5.10.1d-nt> for C<maketest> or
F<log.install-osx1068-5.15.4> for C<makeinstall>.

=cut

sub setup { 
  $_[0]->register_commands( {-ignore_prefix => '_'} );
  $_[0]->register('install', \&build);
}

sub pre_process {
  my $c = shift;
  my @opts = (
	  [ "skip",     "skip versions (glob-style)" ],
	  [ "newer",    "only newer versions (glob-style)" ],
	  [ "older",    "only older versions (glob-style)" ],
	  [ "as=s",     "install perl under given name" ],
	  [ "force|f",  "force install" ],
	  [ "j=n",      "parallel make" ],
	  [ "D=s",      "./configure option" ],
	  [ "A=s",      "./configure option" ],
	  [ "U=s",      "./configure option" ],
	  [ "notest|n",  "skip the test suite on build and makeinstall" ],
	  [ "quiet|q",   "Make perlall command quieter" ],
	  [ "verbose|v", "Make perlall command say more" ],
	  [ "nolog",     "skip writing to the log file" ],
	  [ "help|h",    "commands and options" ],
	  [ "version" ]);
  $c->getopt( map {$_->[0]} @opts );
  my $cmd = $c->cmd;
  # defaults
  $c->config->{PERLALL_BINDIR} = '/usr/local/bin';
  $c->config->{PERLALL_BUILDROOT} = '/usr/src/perl';
  $c->config->{'perl-git'} = $c->config->{PERLALL_BUILDROOT}.'/blead/perl-git';
  $c->config->{cpan} = 'cpan';
  $c->config->{'init-modules'} = 'YAML DBI DBD::SQLite CPAN::SQLite Devel::Platform::Info Params::Util Bundle::CPANReporter2 Math::Round Params::Classify Bundle::CygwinVendor YAML::XS DBIx::Class SQL::Abstract Module::Find Mouse MouseX::Types Task::Kensho';
  # need .perlall
  if ($cmd =~ /^build|uninstall|init|list|do|make.*|cpan$/) {
    for ( "/etc/perlall", "$ENV{HOME}/.perlall" ) {
      $c->_dot_perlall($_) if -f $_;
    }
  }
  # expand versions from $ENV{perlall} and alternatively 
  # accept first argument
  if ($cmd =~ /^do|make.*|init|cpan|list|uninstall$/) {
    my @p;
    if ( $c->argv->[0] =~ /^(perl)?5\./) {
      @p = (shift @{$c->argv});
    } else {
      @p = @{$c->_expand_env()};
    }
    $c->stash->{perlall} = \@p;
  }
}

sub App::Rad::_expand_env {
  my ($c, $glob) = @_;
  unless ($glob) {
    $glob = $ENV{perlall} ? $ENV{perlall} : "5.*";
  }
  my $prefix = $c->config->{PERLALL_BINDIR};
  return [ glob "$prefix/perl$glob" ];
}

sub App::Rad::_dot_perlall {
  my ($c, $filename, $write) = (@_);
  $c->debug("loading configuration from $filename");
  open my $CONFIG, '<', $filename
    or Carp::croak "error opening $filename: $!\n";
  my ($s, $NEW);
  if ($write) {
    open $NEW, '>', $filename.".tmp"
      or Carp::croak "error opening $filename.tmp: $!\n";
  }
  while (<$CONFIG>) {
    $s = $_ if $write; # backup
    chomp;
    s/#.*//;
    s/^\s+//;
    s/\s+$//;
    print $NEW $s if $s and !length;
    next unless length;

    if ( m/^alias\s([^\=\:\s]+) # alias key=value
	   (?:=['"]?)   # ='
	   ([^'"]+)     # value
	  /x
       ) {
      $c->config->{$1} = $2;
      if ($write) {
	$2 = $write if $1 eq 'p';
	print $NEW "alias p=$2\n";
      }
    }
    elsif ( m/^([^\=\:\s]+)          # key
	      (?:                    # (value is optional)
		(?:\s*[\=\:]\s*|\s+) # separator ('=', ':' or whitespace)
		(.+)                 # value
	      )?
	     /x
	  ) {
      $c->config->{$1} = $2;
      print $NEW $s if $write;
    } elsif ($write) {
      print $NEW $s;
    }
  }
  close $CONFIG;
  if ($write) {
    close $NEW;
    rename $CONFIG, $NEW
      or Carp::croak "error 2riting $filename: $!\n";
  }
  scalar keys %{$c->config};  
}

=head2 COMMANDS

=over

=item B<build> [ perl<version><suffix> [ from ]] 

Build and install the given version of perl.

Unreleased git versions, like blead or smoke-me branches 
get a C<@xxxxxx> suffix. The version can be "blead" which
resolves to the current development version.

The optional 2nd argument C<from> can be a git tag/commit/branch, 
e.g. a smoke-me branch, or a file or url with the perl-*.tar.gz
The branchname is added to the perl suffix, such as perl5.15.4dnt-smokeme-utf8 
or can be overridden with --as.

The specified perl is taken from a perl git repo (specified in ~/.perlall), 
or downloaded via CPAN.

C<man> files are not installed.

C<-Dusedevel> is always used to install versioned executables.

Special site-specific non-default config vars are taken 
from F</usr/local/bin/perl> if different from F</usr/bin/perl>,
such as cf_email, perladmin, ccflags, cc, ldflags, ld, man1dir, 
man3dir, pager, libpth.

=cut

sub build
  :Help(new perl<version><suffix> [ from ])
{
  my $c = shift;
  warn "perlall build @ARGV\n";
}

=item install  [ perl<version><suffix> [ from ]]

alias to build

=cut

#sub install
#  :Help(alias to build)
#{
#  build(@_);
#}

=item B<uninstall> perl<version><suffix>

Uninstalls the given version.

=cut

sub uninstall
  :Help(sudo rm /usr/local/bin/perl <arg> and its libs)
{
  return "unimplemented";
}

=item B<init> [perl-<version><suffix> [<modules>...]]

=item perlall="5.*" B<init> [<modules>...]

Installs and updates basic CPAN modules.

Default: $init-modules from ~/.perlall
   (YAML DBI DBD::SQLite CPAN::SQLite Devel::Platform::Info 
   Params::Util Bundle::CPANReporter2 
   B::Flags Opcodes  Math::Round Params::Classify $(cat ~/Perl/B-C/t/top100)
   Bundle::CygwinVendor YAML::XS DBIx::Class SQL::Abstract Module::Find Mouse 
   MouseX::Types Task::Kensho)

=cut

sub init
  :Help(Installs and updates basic CPAN modules)
{
  my $c = shift;
  my @argv = @{$c->argv};
  my $mods = @argv ? join(" ",@argv) : $c->config->{'init-modules'};
  for my $p (@{$c->stash->{perlall}}) {
    # XXX if App::cpan exists -S cpan, otherwise need -MCPAN -e'install qw(mods)'
    warn "$p -S cpan $mods\n";
    system("$p -S cpan $mods");
  }
}

=item B<list> [version*]

List all installed perlall versions

=cut

sub list
  :Help(List all installed perlall versions) 
{
  my $c = shift;
  return join "\n", @{$c->stash->{perlall}};
}

=item B<do> command

Execute commands with all perls from $ENV{perlall}.

For example, run a Hello program:

    perlall do -E'say "Hello from $]"'

is expanded to something like:

  for perl in /usr/local/bin/perl5*; do
    echo $perl $*
    $perl $*
  done

Restricts perls via ENV:

  perlall="5.14.*d*" perlall do -E'say "Hello from $]"'

is expanded to something like:

  for perl in /usr/local/bin/perl5.14.*d*; do
    echo $perl $*
    $perl $*
  done

The output depends on your perl installations, and looks like this:

    perl5.12.2-nt -E'say "Hello from $]"'
    Hello from perl-5.012002
    
    perl5.12.3-m -E'say "Hello from $]"'
    Hello from perl-5.012003
    
    perl5.14.2 -E'say "Hello from $]"'
    Hello from perl-5.014002

    perl5.14.2d -E'say "Hello from $]"'
    Hello from perl-5.014002

    perl5.14.2d-nt -E'say "Hello from $]"'
    Hello from perl-5.014002

    perl5.8.9-nt -E'say "Hello from $]"'
    Unrecognized switch: -E  (-h will show valid options).

    perl5.6.2-nt -E'say "Hello from $]"'
    Unrecognized switch: -E  (-h will show valid options).

Notice that the commands are not executed in parallel.

=cut

sub do
  :Help(Execute commands with all perls) 
{
  my $c = shift;
  my $argv = join " ",@{$c->argv};
  for my $p (@{$c->stash->{perlall}}) {
    warn "$p $argv\n";
    system("$p $argv");
  }
}

=item B<make> args

like C<perlall do>, but prepends C<make clean; $perl Makefile.PL; make> 
before executing the arguments.

=cut

sub make
  :Help('perl Makefile.PL; make') 
{
  my $c = shift;
  my $argv = join " ",@{$c->argv};
  for my $p (@{$c->stash->{perlall}}) {
    # XXX check MB
    system("make -s clean");
    warn "$p Makefile.PL\n";
    system("$p Makefile.PL");
    warn "make\n";
    system("make");
    if ($argv) {
      warn "$p $argv\n";
      system("$p $argv");
    }
  }
}

=item B<maketest>

like C<perlall make>, but runs C<make test TEST_VERBOSE=1> after C<make>.

=cut

sub maketest
  :Help('make; make test') 
{
  my $c = shift;
  for my $p (@{$c->stash->{perlall}}) {
    # XXX check MB
    system("make -s clean");
    warn "$p Makefile.PL\n";
    system("$p Makefile.PL");
    warn "make\n";
    system("make");
    warn "make test TEST_VERBOSE=1\n";
    system("make test TEST_VERBOSE=1");
  }
}

=item B<makeinstall>

like C<perlall maketest>, but runs C<sudo make install> after C<make test>.

=cut

sub makeinstall
  :Help('maketest; sudo make install') 
{
  my $c = shift;
  for my $p (@{$c->stash->{perlall}}) {
    # XXX check MB
    system("make -s clean");
    warn "$p Makefile.PL\n";
    system("$p Makefile.PL");
    warn "make\n";
    system("make");
    warn "make test && sudo make install\n";
    system("make test && sudo make install");
  }
}

=item B<selfupgrade>

This command upgrades perlall to its latest version.

=cut

sub selfupgrade
  :Help(upgrade perlall to its latest version) 
{
  my $c = shift;
  "unimplemented"
}

=item B<help>

prints this help. With -v even more.

=cut

sub help
  :Help('list of commands. With -v more')
{
  my $c = shift;
  $c->getopt( 'verbose|v' );
  require Pod::Usage;
  return Pod::Usage::pod2usage
    ( { -message => App::Rad::Help::usage() . "\n\n"
	. App::Rad::Help::helpstr($c),
	-verbose => $c->options->{verbose} ? 2 : 0,
      } );
}

=item B<version>

=cut

sub version
  :Help(print version)
{
  warn "perlapp $main::VERSION\n";
  exit;
}

=back

=head2 OPTIONS

=item B<-f| --force>

Force installation of a perl.

=item B<-j>C<number>

Enable parallel make and test (if supported by the target perl)

  perlall build -j5 perl5.12.3

=item B<-n| --notest>

Skip the test suite

=item B<--skip> C<versions>

versions might be a glob-style regex.
E.g. --skip '5.1[024]d*'

=item B<--newer> C<versions>

Only with newer versions than. versions might be a glob, 
including a special arch suffix.
E.g. perlall do --newer "5.10.?d-nt" 

=item B<--older> C<versions>

versions might be a regex. As in --newer.

=item B<-q| --quiet>

Make perlall command quieter.

=item B<-v| --verbose>

Make perlall command say more.

For C<build> command, this prints the building whole process to STDOUT.

=item B<--as>

Install a given perl under the given name.

    perlall build perl5.6.2 -Dusemymalloc --as perl5.6.2-mymalloc
    perlall build perlblead-nt smoke-me/test --as perl5.15.4-test

=item B<-D>, B<-U>, B<-A>

pass through switches to the perl Configure script.

    perlall build perl5.10.1-nt -Dusemymalloc -Uuselargefiles

=back

=head1 CONFIGURATION

=over 4

=item ~/.perlall

This is shell-script syntax with ENV vars and aliases. 
C<alias p=$perlall> is also written by perlall.
 
    alias perl-git="cd /usr/src/perl/blead/perl-git"
    alias p=perl5.15.4d-nt

C<perl-git> stores the perl src root, which is also a handy alias to cd into it.

Valid vars: 

    PERLALL_PREFIX  - Where perls are installed into. Default: /usr/local
    PERLBUILD_ROOT  - Where perls are built. Default: /usr/src/perl
    alias perl-git  - blead root with .git to avoid downloading perl-*.tar.gz from CPAN

=back

=head1 SEE ALSO

The bash scripts, which I used for some years:
L<http://github.com/rurban/dot-bin/blob/master/perlall-makeinstall>

L<App::perlbrew> which looked like my bash scripts and B<perlall>
but pollutes PERL5LIB and thus your whole environment, similar to
the horrible Oracle perl.

=cut
